{"meta":{"title":"LQQB's Blog (ง •̀_•́)ง","subtitle":"将一个大问题分解为若干小问题，然后一个一个解决","description":"将一个大问题分解为若干小问题，然后一个一个解决","author":"lqqb","url":"http://qbqb.pro"},"pages":[{"title":"My Blog Name | 404","date":"2018-08-14T07:58:06.720Z","updated":"2018-08-14T07:58:06.720Z","comments":true,"path":"404.html","permalink":"http://qbqb.pro/404.html","excerpt":"","text":""},{"title":"","date":"2018-08-14T05:32:22.497Z","updated":"2018-08-14T05:32:22.497Z","comments":false,"path":"tags/index.html","permalink":"http://qbqb.pro/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-08-14T05:36:59.607Z","updated":"2018-08-14T05:36:59.607Z","comments":false,"path":"categories/index.html","permalink":"http://qbqb.pro/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringSecurity基本原理分析","slug":"SpringSecurity基本原理","date":"2018-08-31T09:25:56.000Z","updated":"2018-09-03T09:44:37.941Z","comments":true,"path":"2018/08/31/SpringSecurity基本原理/","link":"","permalink":"http://qbqb.pro/2018/08/31/SpringSecurity基本原理/","excerpt":"SpringSecurity 是一个能够基于 Spring 的企业应用系统提供声明式的安全框架","text":"SpringSecurity 是一个能够基于 Spring 的企业应用系统提供声明式的安全框架 它能做什么 认证: 识别当前用户是谁授权: 判断当前用户是否有权限进行相关操作安全防护: 防止伪造身份 如果要对 Web 资源进行保护，最好的方法莫过于 Filter, 要项对方法调用进行保护，最好的方法莫过于AOP, (ﾉ ○ Д ○)ﾉ。 它是如何实现的下面来简单的介绍一个 SpringSecurity 基本原理 :当一个请求要访问我们受 SpringSecurity 保护的 Web 资源的时候, 会先经过我们在 Spring 中设置的关于 SpringSecurity 的多层过滤器链,(如 UsernamePasswordAuthenticationFilter, BasicAuthenticationFilter),一个过滤器一个过滤器往下走,每通过一个过滤器的认证就会添加在请求中添加一个标记。如下图所示: 然后勒，这些 Filter 怎么和我们的数据库联系在一起勒？ 这些 Filter 并不直接处理用户的认证，也不直接处理用户的授权，而是把它们交给认证管理器 AuthenticationManager 和决策管理器 AccessDecisionManager。SpringSecurity 提供了多个Provider的实现类，拿 UsernamePasswordAuthenticationFilter举例，当我们调用这个 Filter，并通过AuthenticationManager调用到 DaoAuthenticationProvider, 这个 Provider 可以调用数据库来存储用户的认证数据。对于Voter，我们一般选择RoleVoter就够用了，它会根据我们配置中的设置来决定是否允许某一个用户访问制定的Web资源。认证跟授权的流程如下图： DaoAuthenticationProvider不直接操作数据库的，它把任务委托给了 UserDetailService，我们要做的就是现实 UserDetailService, 它既是连接我们数据库跟SpringSecurity的桥梁。UserDetailService 的要求也很简单，只需要返回一个 org.springframework.security.userdetails.User 对象的 loadUserByUsername(String userName) 方法。因此，怎么设计数据库都可以，不管我们是用一个表还是两个表还是三个表，也不管我们是用户-授权，还是用户-角色-授权，还是用户-用户组-角色-授权，这些具体的东西 SpringSecurity 统统不关心，它只关心返回的那个User对象，至于怎么从数据库中读取数据，那就是我们自己的事了。 UserDetailService 实现类部分代码,模拟从数据库中获取用户信息:123456789101112131415@Componentpublic class MyUserDetailsService implements UserDetailsService &#123; @Autowired private UserRepository userRepository; @Override public UserDetails loadUserByUsername(String username) &#123; User user = userRepository.findByUsername(username); if (user == null) &#123; throw new UsernameNotFoundException(username); &#125; return new MyUserPrincipal(user); &#125;&#125; MyUserPrincipal定义如下：12345678public class MyUserPrincipal implements UserDetails &#123; private User user; public MyUserPrincipal(User user) &#123; this.user = user; &#125; //...&#125; SpringSecurity 不关心你用了几个表，它只关心UserDetails对象。而决定用户能否访问指定Web资源的，是RoleVoter类，无需任何修改它可以工作得很好，唯一的缺点是它只认ROLE_前缀。 它的常用 Filter 总结SpringSecurity 提供的Filter 不少，不过常用的只有这么几个，下面我们来总结一下： ChannelProcessingFilter: 制定必须为https连接LogoutFilter:退出登录UsernamePasswordAuthenticationFilter: 账号密码登录RememberMeAuthenticationFilter: 记住用户FilterSecurityInterceptor: 这个过滤器是整个SpringSecurity过滤器链的最后一环 接下来简短的来谈一谈，FilterSecurityInterceptor 这个过滤器的最后一环，也是最重要的一环。它的父类AbstractSecurityInterceptor 是一个实现了对受保护对象的访问进行拦截的抽象类,该抽象类包含了AccessDecisionManager(决策管理器)、AuthenticationManager(身份认证管理器)的setter， 可以通过Spring 自动注入，另外，资源角色授权器需要单独自定义注入。 其中有几个比较重要的方法,都会在FilterSecurityInterceptor中被调用: beforeInvocation()方法: 实现了对访问受保护对象的权限校验，内部用到了AccessDecisionManager和AuthenticationManager;finallyInvocation()方法: 用于实现受保护对象请求完毕后的一些清理工作，主要是如果在beforeInvocation()中改变了SecurityContext，则在finallyInvocation()中需要将其恢复为原来的SecurityContext,该方法的调用应当包含在子类请求受保护资源时的finally语句块中;afterInvocation()方法: 实现了对返回结果的处理，在注入了AfterInvocationManager的情况下默认会调用其decide()方法。 来看看 FilterSecurityInterceptor 的部分源码：123456789101112131415161718192021222324252627282930313233343536373839public class FilterSecurityInterceptor extends AbstractSecurityInterceptor implements Filter &#123; // 。。。。 public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; FilterInvocation fi = new FilterInvocation(request, response, chain); this.invoke(fi); // invoke() 在Filter 的 doFilter（）中被调用 &#125; // FilterSecurityInterceptor 的核心代码 public void invoke(FilterInvocation fi) throws IOException, ServletException &#123; if (fi.getRequest() != null &amp;&amp; fi.getRequest().getAttribute(\"__spring_security_filterSecurityInterceptor_filterApplied\") != null &amp;&amp; this.observeOncePerRequest) &#123; fi.getChain().doFilter(fi.getRequest(), fi.getResponse()); &#125; else &#123; if (fi.getRequest() != null) &#123; fi.getRequest().setAttribute(\"__spring_security_filterSecurityInterceptor_filterApplied\", Boolean.TRUE); &#125; // 调用父类的beforeInvocation方法，该方法实现了对访问受保护对象的权限校验， // 内部调用到了`AccessDecisionManager`和`AuthenticationManager` InterceptorStatusToken token = super.beforeInvocation(fi); try &#123; fi.getChain().doFilter(fi.getRequest(), fi.getResponse()); &#125; finally &#123; // 调用父类的finallyInvocation方法, 用于实现受保护对象请求完毕后的一些清理工作 super.finallyInvocation(token); &#125; // 用父类的afterInvocation方法,实现了对返回结果的处理， // 在注入了AfterInvocationManager的情况下默认会调用其decide()方法。 super.afterInvocation(token, (Object)null); &#125; &#125; // 。。。。&#125; 最后说点什么感觉最后不说点什么，有点奇怪。。。笔者目前也在学习的SpringSecurity， 目前是一个阶段性的总结，以后如果有更深的理解会继续更新。笔者并没有讲具体的实现细节，只是大概的过了一遍SpringSecurity的执行过程，有遗漏的错误的地方欢迎指出。","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://qbqb.pro/tags/Spring/"},{"name":"Java","slug":"Java","permalink":"http://qbqb.pro/tags/Java/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"http://qbqb.pro/tags/SpringSecurity/"}]},{"title":"记一次git错误解决","slug":"记一次git错误解决，回顾git常用命令","date":"2018-08-27T02:23:06.000Z","updated":"2018-08-27T10:46:15.244Z","comments":true,"path":"2018/08/27/记一次git错误解决，回顾git常用命令/","link":"","permalink":"http://qbqb.pro/2018/08/27/记一次git错误解决，回顾git常用命令/","excerpt":"记录一次 git 错误， fatal: Path ‘XXX’ is in submodule ‘XXX’","text":"记录一次 git 错误， fatal: Path ‘XXX’ is in submodule ‘XXX’ 将Hexo博客部署到 Github 跟 Codeing 的 Pages 之后，为了能方便的在其他电脑也能随时更新博客文章、Hexo 配置文件和主题配置文件，我们在 GitHub Pages 仓库上创建了一个名为 Hexo 的分支，用来存放 Hexo 博客的网站文件。具体的操作步骤参考 知乎上的一个高赞回复 这里不详细展开 (ˉ▽ˉ；)… ）。创建分支 Hexo ,将网站文件提交到分支，在另外一台电脑 pull 下分支中网站文件，安装相关模块，一气呵成。。。 可是在hexo server本地运行的时候,无法运行? 检查了主题文件夹目录下 themes/indigo 既然是空的，远程仓库中的对应的文件夹图标往常不同，画风都变了 (ﾉ ○ Д ○)ﾉ ，还无法点击查看下级目录，与下图的图标类似： 一开始以为该文件目录,忘记推送至远程仓库，所以打算重新将该文件夹下的文件添加至暂存区，git add themes/indigo/* ,可是既然报错了, 错误信息 ** fatal: Path &#39;XXX&#39; is in submodule &#39;XXX&#39; ** ??? 仔细对比了themes/indigo 下的文件，发现该文件既然有一个 .git 目录，推测是由于一个 git 项目下无法识别其他的 git 项目。 把 indigo 主题文件复制一份删除 .git 文件 从当前的工作空间中和索引中删除主题文件 indigo git rm -rf themes/indigo 将 indigo 主题文件复制到原来的主题问题目录下，添加暂存区，提交版本库，推送分支完成。重新再另外一台电脑 拉取分支，可以正常运行~~~","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://qbqb.pro/tags/git/"}]},{"title":"Hexo 使用小记","slug":"Hexo使用小记","date":"2018-08-20T06:06:12.000Z","updated":"2018-08-27T09:04:25.561Z","comments":true,"path":"2018/08/20/Hexo使用小记/","link":"","permalink":"http://qbqb.pro/2018/08/20/Hexo使用小记/","excerpt":"hexo 是一个快速、简洁且高效的博客框架","text":"hexo 是一个快速、简洁且高效的博客框架，本网站由Hexo 搭建而成，使用了的主题是有着Design风格的Hexo主题 indigo。下面我们简单的总结一下搭建过程。 参考 Hexo 官方文档参考 Hexo 使用MD编辑技巧 参考 Material Design风格的Hexo主题参考 Hexo Seo优化 Hexo 安装安装前,请检查电脑中是否安装下列应用程序 Node.jsGit 没有的话，请先安装吧,建议最新版本，可以避免部分安装上的错误。如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 npm install -g hexo-cli Hexo 常用命令 hexo init [folder] # 新建网站，folder为文件夹名hexo clean # 清除缓存文件hexo g -d # 生成静态文件，并自动部署网站hexo new “postname” # 新建一篇文章hexo server # 启动服务器 Hexo 目录结构 使用新建网站命令创建Hexo的目录结构 hexo init foldercd foldernpm install 整个过程只需要两三分钟左右的时间 emmmm…. , 文件的目录结构如下图： 目录结构图 下面是比较常用到的几个文件 _config.yml网站的配置信息，可以在此配置大部分的参数,在新建Hexo 目录的根路径上 source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 Hexo 主题安装安装该主题需确认你的 Hexo 版本在 3.0 以上，以及 Node 版本为 6.x 以上，在 Hexo 根目录，执行以下命令 git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 并编辑站点配置文件， _config.yml 启用主题 theme: indigo ,详细配置信息可查看文档,根据具体自己的需求进行配置 主题效果 后续补充","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://qbqb.pro/tags/Hexo/"}]},{"title":"第一篇博客，该写点什么~","slug":"first","date":"2018-08-16T12:00:28.000Z","updated":"2018-08-16T13:34:44.066Z","comments":true,"path":"2018/08/16/first/","link":"","permalink":"http://qbqb.pro/2018/08/16/first/","excerpt":"","text":"这是我在这个网站写的第一篇博客，不知到写点什么好， emmmmm~ 一个人如果做的东西没有特点就很难得到别人的喜欢，我是一个比较愚钝的人，踩过很多坑，努力填了很多坑，同时也认识到了自己的不足，这是一个用来记录我学习踩坑的地方。 在这里送上我最喜欢的两句话 我们使用时间的方式就是我们塑造自己的方式。 我们的人生是因为有爱，才突显了光；是因为有消逝，所以存在才会有意义。","categories":[],"tags":[{"name":"记录","slug":"记录","permalink":"http://qbqb.pro/tags/记录/"}]},{"title":"markdown语法测试","slug":"我的世界","date":"2018-08-14T02:21:10.000Z","updated":"2018-08-15T05:45:30.332Z","comments":true,"path":"2018/08/14/我的世界/","link":"","permalink":"http://qbqb.pro/2018/08/14/我的世界/","excerpt":"Markdown 是一种轻量级标记语言,它用简洁的语法代替排版,使我们专心于码字","text":"Markdown 是一种轻量级标记语言,它用简洁的语法代替排版,使我们专心于码字 markdown语法”###”表示三级标题，二级标题，一级标题向上类推 无序列表用”*”表示 攻击防护( 防止伪造身份 ) 普通的代码块 用 codeblock 与 endcodeblock 标记123public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args);&#125; 相对路径引用的标签插件 测试图片","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://qbqb.pro/tags/Hexo/"},{"name":"markdown","slug":"markdown","permalink":"http://qbqb.pro/tags/markdown/"}]}]}